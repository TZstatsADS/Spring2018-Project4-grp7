install.packages("np")
library("np")
data("cps71")
help("n[")
help(np)
load("C:/Users/Mebiu/OneDrive/统计/Spring 2018/GR5243 Applied Data Science/movie_train_simrank.Rdata")
load("C:/Users/Mebiu/OneDrive/统计/Spring 2018/GR5243 Applied Data Science/movie_train_simrank.Rdata")
setwd("C:/Users/Mebiu/OneDrive/统计/Spring 2018/GR5243 Applied Data Science")
load("C:/Users/Mebiu/OneDrive/统计/Spring 2018/GR5243 Applied Data Science/movie_train_simrank.Rdata")
movie_train <- read.csv("movie_train.csv")
movie_user_train_simrank <- movie_train[1:100, 2:1620]
for (i in 1 : nrow(movie_user_train_simrank)){
for (j in 1: ncol(movie_user_train_simrank)){
movie_user_train_simrank[i,j] <- ifelse(movie_user_train_simrank[i,j] >= 4, 1, NA)
}
}
Compute_User_SimRank0 <- function(j,k,data){
if (j == k){R <- 1}
else{
userj <- which(data[j,] == 1)
userk <- which(data[k,] == 1)
if ((length(userj)+length(userk)-length(unique(c(userj,userk)))
<= 0.25 * min(length(userj),length(userk)))){R <- 0}
else{
R <- ((length(userj) + length(userk) -
length(unique(c(userj,userk)))) * 0.8 /
length(userk) / length(userj))
}
}
return(R)
}
Compute_Movie_SimRank0 <- function(j,k,data){
if (j == k){R <- 1}
else{
moviej <- which(data[j,] == 1)
moviek <- which(data[k,] == 1)
if ((length(moviej)+length(moviek)-length(unique(c(moviej,moviek)))
<= 0.25 * min(length(moviej),length(moviek)))){R <- 0}
else{
R <- ((length(moviej) + length(moviek) -
length(unique(c(moviej,moviek)))) * 0.8 /
length(moviek) / length(moviej))
}
}
return(R)
}
MovieSimRank0 <- matrix(0, nrow = nrow(movie_user_train_simrank),
ncol = nrow(movie_user_train_simrank))
for (i in 1:nrow(movie_user_train_simrank)) {
for (j in 1:nrow(movie_user_train_simrank)){
MovieSimRank0[i,j] <- Compute_Movie_SimRank(i,j)
}
}
UserSimRank0 <- matrix(0, nrow = nrow(movie_user_train_simrank),
ncol = nrow(movie_user_train_simrank))
for (i in 1:nrow(movie_user_train_simrank)) {
for (j in 1:nrow(movie_user_train_simrank)){
UserSimRank0[i,j] <- Compute_User_SimRank0(i,j)
}
}
for (i in 1:nrow(movie_user_train_simrank)) {
for (j in 1:nrow(movie_user_train_simrank)){
UserSimRank0[i,j] <- Compute_User_SimRank0(i,j,movie_user_train_simrank)
}
}
movie_user_train_simrank <- movie_train[1:100, 2:101]
for (i in 1 : nrow(movie_user_train_simrank)){
for (j in 1: ncol(movie_user_train_simrank)){
movie_user_train_simrank[i,j] <- ifelse(movie_user_train_simrank[i,j] >= 4, 1, NA)
}
}
UserSimRank0 <- matrix(0, nrow = nrow(movie_user_train_simrank),
ncol = nrow(movie_user_train_simrank))
for (i in 1:nrow(movie_user_train_simrank)) {
for (j in 1:nrow(movie_user_train_simrank)){
UserSimRank0[i,j] <- Compute_User_SimRank0(i,j,movie_user_train_simrank)
}
}
View(UserSimRank0)
Compute_Movie_SimRank0 <- function(j,k,data){
if (j == k){R <- 1}
else{
moviej <- which(data[j,] == 1)
moviek <- which(data[k,] == 1)
if ((length(moviej)+length(moviek)-length(unique(c(moviej,moviek)))
<= 0.25 * min(length(moviej),length(moviek)))){R <- 0}
else{
R <- ((length(moviej) + length(moviek) -
length(unique(c(moviej,moviek)))) * 0.8 /
length(moviek) / length(moviej))
}
}
return(R)
}
MovieSimRank0 <- matrix(0, nrow = ncol(movie_user_train_simrank),
ncol = ncol(movie_user_train_simrank))
for (i in 1:ncol(movie_user_train_simrank)) {
for (j in 1:ncol(movie_user_train_simrank)){
MovieSimRank0[i,j] <- Compute_Movie_SimRank0(i,j,t(movie_user_train_simrank))
}
}
View(MovieSimRank0)
movie_user_train_simrank <- movie_train[1:100, 2:101]
for (i in 1 : nrow(movie_user_train_simrank)){
for (j in 1: ncol(movie_user_train_simrank)){
movie_user_train_simrank[i,j] <- ifelse(movie_user_train_simrank[i,j] >= 4, 1, 0)
}
}
View(movie_user_train_simrank)
for (i in 1 : nrow(movie_user_train_simrank)){
for (j in 1: ncol(movie_user_train_simrank)){
movie_user_train_simrank[i,j] <- ifelse(movie_user_train_simrank[i,j] == NA, 0,
movie_user_train_simrank[i,j])
}
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
for (i in 1 : nrow(movie_user_train_simrank)){
for (j in 1: ncol(movie_user_train_simrank)){
movie_user_train_simrank[i,j] <- ifelse(movie_user_train_simrank[i,j] >= 4, 1, NA)
}
}
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
View(movie_user_train_simrank)
Compute_User_SimRank1 <- function(j,k,data){
if (j == k){R <- 1}
else{
userj <- which(data[j,] == 1)
userk <- which(data[k,] == 1)
if ((length(userj)+length(userk)-length(unique(c(userj,userk)))
<= 0.25 * min(length(userj),length(userk)))){R <- 0}
else{
for (i in userj){
for (j in userk){
sum <- sum + MovieSimRank0[i,j]
}
}
R <- (sum * 0.8 / length(userk) / length(userj))
}
}
return(R)
UserSimRank1 <- matrix(0, nrow = nrow(movie_user_train_simrank),
ncol = nrow(movie_user_train_simrank))
for (i in 1:nrow(movie_user_train_simrank)) {
for (j in 1:nrow(movie_user_train_simrank)){
UserSimRank1[i,j] <- Compute_User_SimRank1(i,j,movie_user_train_simrank)
}
}
Compute_User_SimRank0 <- function(j,k,data){
if (j == k){R <- 1}
else{
userj <- which(data[j,] == 1)
userk <- which(data[k,] == 1)
if ((length(userj)+length(userk)-length(unique(c(userj,userk)))
<= 0.25 * min(length(userj),length(userk)))){R <- 0}
else{
R <- ((length(userj) + length(userk) -
length(unique(c(userj,userk)))) * 0.8 /
length(userk) / length(userj))
}
}
return(R)
}
Compute_Movie_SimRank0 <- function(j,k,data){
if (j == k){R <- 1}
else{
moviej <- which(data[j,] == 1)
moviek <- which(data[k,] == 1)
if ((length(moviej)+length(moviek)-length(unique(c(moviej,moviek)))
<= 0.25 * min(length(moviej),length(moviek)))){R <- 0}
else{
R <- ((length(moviej) + length(moviek) -
length(unique(c(moviej,moviek)))) * 0.8 /
length(moviek) / length(moviej))
}
}
return(R)
}
Compute_User_SimRank1 <- function(j,k,data){
if (j == k){R <- 1}
else{
userj <- which(data[j,] == 1)
userk <- which(data[k,] == 1)
if ((length(userj)+length(userk)-length(unique(c(userj,userk)))
<= 0.25 * min(length(userj),length(userk)))){R <- 0}
else{
for (i in userj){
for (j in userk){
sum <- sum + MovieSimRank0[i,j]
}
}
R <- (sum * 0.8 / length(userk) / length(userj))
}
}
return(R)
}
movie_train <- read.csv("movie_train.csv")
movie_user_train_simrank <- movie_train[1:100, 2:101]
for (i in 1 : nrow(movie_user_train_simrank)){
for (j in 1: ncol(movie_user_train_simrank)){
movie_user_train_simrank[i,j] <- ifelse(movie_user_train_simrank[i,j] >= 4, 1, NA)
}
}
MovieSimRank0 <- matrix(0, nrow = ncol(movie_user_train_simrank),
ncol = ncol(movie_user_train_simrank))
for (i in 1:ncol(movie_user_train_simrank)) {
for (j in 1:ncol(movie_user_train_simrank)){
MovieSimRank0[i,j] <- Compute_Movie_SimRank0(i,j,t(movie_user_train_simrank))
}
}
UserSimRank1 <- matrix(0, nrow = nrow(movie_user_train_simrank),
ncol = nrow(movie_user_train_simrank))
for (i in 1:nrow(movie_user_train_simrank)) {
for (j in 1:nrow(movie_user_train_simrank)){
UserSimRank1[i,j] <- Compute_User_SimRank1(i,j,movie_user_train_simrank)
}
}
View(MovieSimRank0)
user1 <- which(movie_user_train_simrank[1,] == 1)
ser1
user1
user2 <- which(movie_user_train_simrank[2,] == 1)
user2
c(user1)
x <- c(1,2,3)
y <- c(1,1,1,1,1,1,)
y <- c(1,1,1,1,1,1)
sum <- 0
for (i in x)
sum <- sum + y[i]
Compute_User_SimRank0 <- function(j,k,data){
if (j == k){R <- 1}
else{
userj <- which(data[j,] == 1)
userk <- which(data[k,] == 1)
if ((length(userj)+length(userk)-length(unique(c(userj,userk)))
<= 0.25 * min(length(userj),length(userk)))){R <- 0}
else{
R <- ((length(userj) + length(userk) -
length(unique(c(userj,userk)))) * 0.8 /
length(userk) / length(userj))
}
}
return(R)
}
Compute_Movie_SimRank0 <- function(j,k,data){
if (j == k){R <- 1}
else{
moviej <- which(data[j,] == 1)
moviek <- which(data[k,] == 1)
if ((length(moviej)+length(moviek)-length(unique(c(moviej,moviek)))
<= 0.25 * min(length(moviej),length(moviek)))){R <- 0}
else{
R <- ((length(moviej) + length(moviek) -
length(unique(c(moviej,moviek)))) * 0.8 /
length(moviek) / length(moviej))
}
}
return(R)
}
Compute_User_SimRank1 <- function(j,k,data){
if (j == k){R <- 1}
else{
userj <- which(data[j,] == 1)
userk <- which(data[k,] == 1)
if ((length(userj)+length(userk)-length(unique(c(userj,userk)))
<= 0.25 * min(length(userj),length(userk)))){R <- 0}
else{
sum <- 0
for (i in userj){
for (j in userk){
sum <- sum + MovieSimRank0[i,j]
}
}
R <- (sum * 0.8 / length(userk) / length(userj))
}
}
return(R)
}
for (i in 1:nrow(movie_user_train_simrank)) {
for (j in 1:nrow(movie_user_train_simrank)){
UserSimRank1[i,j] <- Compute_User_SimRank1(i,j,movie_user_train_simrank)
}
}
View(UserSimRank1)
write.csv(MovieSimRank0, "MovieSimRank0.csv")
write.csv(UserSimRank1, "UserSimRank1.csv")
load("C:/Users/Mebiu/OneDrive/统计/Spring 2018/GR5243 Applied Data Science/ms_train_pearson.RData")
setwd("E:/GitHub/Spring2018-Project4-grp7")
load("../output/weight/ms_train_pearson.RData")
load("E:/GitHub/Spring2018-Project4-grp7/output/weight/ms_train_pearson.RData")
load("E:/GitHub/Spring2018-Project4-grp7/output/weight/ms_train_vector.RData")
